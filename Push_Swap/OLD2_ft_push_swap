/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_push_swap.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mkaratzi <mkaratzi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/12/09 19:41:57 by mkaratzi          #+#    #+#             */
/*   Updated: 2022/12/10 11:18:47 by mkaratzi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>
#include "ft_push_swap.h"

int main(int argc, char const **argv)
{
	int i;
	char **a;
	char *solution;
	t_stack *stack_a;

	a = NULL;
	stack_a = NULL;
	i = 0;
	if (argc < 2)
		return 0;
	if (argc == 2)
		{
			a = ft_split(argv[1], ' ');
			while (a[i])
				if (!(add_to_stack(&stack_a, a[i++])))
						return (ft_error_free(&stack_a, a));
		}
	i = 1;
	while ( i < argc && argc > 2)
		if (!(add_to_stack(&stack_a, argv[i++])))
				return (ft_error_free(&stack_a, a));
	i = sort_the_stack(&stack_a);
	if (!i)
		return (ft_error_free(&stack_a, a));
	if (i < 10)
		solution = bruteforce(&stack_a, i);
	if (solution)
	{
		while (stack_a)
		{
			ft_printf("\nWE GOT: %d,  %d , %d\n", stack_a->nbr, stack_a->fixed , stack_a->sorted);
			stack_a = stack_a->next;
		}
		
	}
	ft_printf("Our solution is %s\n", solution);
	return 0;
}

int add_to_stack(t_stack **head, const char *str)
{
	t_stack	*current;

	current = *head;
	if (*head == NULL)
	{
		(*head) = create_empty(head);
		if (*head)
		{
			(*head)->nbr = ft_atou(str);
			if ((*head)->nbr == 2147483648)
				return (0);
			return (1);
		}
	}
	while (current->next != NULL)
	{
		current = current->next;
	}
	current->next = create_empty(&current);
	current = current->next;
	if (current)
	{
			current->nbr = ft_atou(str);
			if (current->nbr == 2147483648)
				return (0);
	}
	return (1);
}

t_stack	*create_empty(t_stack **item)
{
	t_stack	*new;

	new = malloc(sizeof(t_stack));
	if(new)
		{
			new->nbr = 0;
			new->sorted = 0;
			new->fixed = 0;
			new->next = NULL;
		}
	item = &new;
	return (*item);
}

int ft_error_free(t_stack **stack_a, char **split)
{
	int i;

	i = 0;
	free_stack(stack_a);
	if (split != NULL)
		{
			while (split[i] != NULL)
				free(split[i++]);
			free(split[i]);
		}
	ft_printf("Error\n");
	return (0);
}

void free_stack(t_stack **stack)
{
	if ((*stack)->next != NULL)
		free_stack(&(*stack)->next);
	free((*stack));
	return ;
}

int sort_the_stack(t_stack **stack_a)
{
	long 	i;
	long	j;
	short	test;
	t_stack *current;

	i = 1;
	j = 1;
	current = *stack_a;
	while (current != NULL)
	{
		current = current->next;
		i++;
	}
	while (j < i)
	{
		test = find_next_smallest(stack_a, j);
		if (!test)
			return (0);
		j++;
	}
	assignfixed(stack_a);
	return ((j - 1));
}

void assignfixed(t_stack **stack)
{
	long fixed;
	t_stack *current;

	current = *stack;
	fixed = 1;
	while ( current != NULL)
		{
			current->fixed = fixed;
			fixed++;
			current = current->next;
		}
	return ;
}

short find_next_smallest(t_stack **stack_a, long j)
{
	t_stack	*current;
	t_stack *smallest;

	current = *stack_a;
	smallest = NULL;
	
	while (current != NULL)
	{
		if ( current->sorted == 0 && smallest == NULL)
			{
				current->sorted = j;
				smallest = current;
			}
		if (current->sorted == 0 && current->nbr < smallest->nbr)
			{
				current->sorted = j;
				smallest->sorted = 0;
				smallest = current;
			}
		current = current->next;
		if (current != NULL && smallest != NULL)
			if (current->nbr == smallest->nbr)
				return (0);
	}
	return (1);
}

char *bruteforce(t_stack **stack_a, long size)
{
	long i;
	long j;
	long solution;
	char *solved;

	solution = 0;
	i = size * 3;
	if (check_bruteforce(i, stack_a, size, &solved))
		return (NULL);
	return (0);
}

// int perform_move(long number, int move)
// {
// 	if (move == 1)
// 		 return (move_sa(number));
// 	if (move == 2)
// 		 return (move_sb(number));
// 	if (move == 3)
// 		 return (move_pa(number));
// 	if (move == 4)
// 		 return (move_pb(number));
// 	if (move == 5)
// 		 return (move_ra(number));
// 	if (move == 6)
// 		 return (move_rb(number));
// 	if (move == 7)
// 		 return (move_rra(number));
// 	if (move == 8)
// 		 return (move_rrb(number));
// 	if (move == 9)
// 		 return (move_rrr(number));
// 	return 0;
// }

long	check_bruteforce(long seq, t_stack **stack_a, long size, char **solution)
{
	int				index;
	int				madness;
	int				whatishappening;
	long 			stack_a_size;
	t_instructions	*solved;


	index = 1;
	solved = malloc(sizeof(t_instructions));
	while (index < seq)
	{
		if (!solved)
			return 0;
		solved->solution = (char *)malloc(sizeof(char) * (index + 1));
		whatishappening = 1;
		madness = 0;
		solved->solution[index] = '\0';
		if (madness < index)
				solved->solution[madness++] = '1';
		while (whatishappening)
		{
			if(checkforsolution(&solved, stack_a, size))
			{
				ft_printf("\nWe get answer: %s\n", solved);
				solution = &solved->solution;
				return 1;
			}
			else
			{
				whatishappening = incriment(&solved);	
			}
		}
		index++;
	}
	
	return 0;
}

int incriment(t_instructions **to_increase)
{
	int i;

	i = 0;
	while ((*to_increase)->solution[i] != '\0')
		i++;
	if (i > 0)
		i--;
	
	while ((*to_increase)->solution[i] != '\0')
	{
		
		if ((*to_increase)->solution[i] != '\0' && (*to_increase)->solution[i] < '8')
			{
				(*to_increase)->solution[i] = (*to_increase)->solution[i] + 1;
				return (1);
			}
		else if ((*to_increase)->solution[i] != '\0' && (*to_increase)->solution[i] == '8')
			{
				if (i == 0)
					return 0;
				else if (i > 0)
		 			{
						(*to_increase)->solution[i] = '1';
						i--;
					}
			}
			
	}
	
	return (0);
}

int	checkforsolution(t_instructions **solved, t_stack **stack_a, long stack_size)
{
	t_stack *current;

	current = *(stack_a);
	while (current)
	{
	if (!(math_check(solved, current->fixed, current->sorted, stack_size)))
			return 0;
		//ft_printf("we got here with the instructions:%s, %d, %d", solved, current->fixed, current->sorted);
		current = current->next;
	}
	ft_printf("\nWe segfault here with index: %s\n", (*solved)->solution);
	return 1;
}

int	math_check(t_instructions **solved, long fixed, long sorted, long stack_size)
{
	int i;
	long b_stack;

	b_stack = 0;
	i = 0;
	
	while((*solved)->solution[i]  != '\0')
	{	
		if ((*solved)->solution[i] == '1')
		{
			ft_printf("Here we have insturction: %c and %d and %d\n", (*solved)->solution[i] , sorted, stack_size);
			if (stack_size < 2)
				return 0;
			if (fixed == 1)
				fixed = 2;
			else if (fixed == 2)
				fixed = 1;
			
		}
		else if ((*solved)->solution[i] == '2')
		{
			if (b_stack < 2)
				return 0;
			if (fixed == -1 && b_stack > 2)
				fixed = -2;
			else if (fixed == -2 && b_stack > 2)
				fixed = 1;
		}
		else if ((*solved)->solution[i] == '3')
		{
			if (b_stack > 1)
				return 0;
			if (fixed == -1)
				fixed = 1;
			else if (fixed < -1)
				fixed++;
			b_stack--;
			stack_size++;
		}
		else if ((*solved)->solution[i] == '4')
		{
			if (stack_size < 1)
				return 0;
			if (fixed == 1)
				fixed = -1;
			else if (fixed > 1)
				fixed--;
			b_stack++;
			stack_size--;
		}
		else if ((*solved)->solution[i] == '5')
		{
			if (stack_size >= 2)
				return 0;
			if (fixed == 1)
				fixed = stack_size;
			else  if (fixed > 1)
				fixed--;
		}
		else if ((*solved)->solution[i] == '6')
		{
			if (b_stack >= 2)
				return 0;
			if (fixed == -1)
				fixed = (-1)*(b_stack);
			else if (fixed < -1)
				fixed++;
		}
		else if ((*solved)->solution[i] == '7')
		{
			if (stack_size >= 2)
				return 0;
			if (fixed == stack_size)
				fixed = 1;
			else if (fixed < stack_size && fixed >= 1)
				fixed++;
		}
		else if ((*solved)->solution[i] == '8')
		{
			if (b_stack < 2)
				return 0;
			if (fixed == ((-1) * b_stack))
				fixed = -1;
			else if (fixed > ((-1) * b_stack) && fixed <= -1)
				fixed--;
		}
		i++;
	}
	// ft_printf("Here we have insturction: %c and %d and %d\n", (*solved)->solution[i] , sorted, fixed);
	if (fixed == sorted)
		return (1);
	return 0;
}